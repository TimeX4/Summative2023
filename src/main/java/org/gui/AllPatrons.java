/* (C)2023 */
package org.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import org.library.Patron;

import java.awt.*;
import java.util.Locale;
import java.util.Map;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

public class AllPatrons {
    private JPanel AllPatrons;
    private JList<String> list1;
    private JButton deletePatron;
    private JButton editPatron;
    private JButton selectPatron;
    private JButton backButton;
    private Notifier notificationText;
    private final DefaultListModel<String> listModel = new DefaultListModel<>();

    public AllPatrons(JFrame frame, LibraryGUI libraryGUI, LibrarianPanel librarianPanel) {
        // Load every patron and add them to the model.
        $$$setupUI$$$();
        for (Map.Entry<Long, Patron> entry : Patron.getLoadedPatrons().entrySet()) {
            Patron Patron = entry.getValue();
            if (Patron != null) {
                listModel.addElement(Patron.toString());
            }
        }
        list1.setModel(listModel);
        deletePatron.addActionListener(
                actionEvent -> {
                    // Find the selected patron and delete it from both the loaded patrons list and
                    // the model.
                    int idx = list1.getSelectedIndex();
                    int i = 0;
                    for (Map.Entry<Long, Patron> entry : Patron.getLoadedPatrons().entrySet()) {
                        if (i == idx) {
                            Long id = entry.getKey();
                            if (!Patron.getLoadedPatrons().get(id).getCheckedOut().isEmpty()) {
                                notificationText.showText("Cannot delete patron, they still have items checked out.", 3000);
                                return;
                            }
                            Patron.DeletePatron(id);
                            listModel.remove(idx);
                            list1.setModel(listModel);
                            list1.revalidate();
                            list1.repaint();
                            return;
                        }
                        i++;
                    }
                });
        editPatron.addActionListener(
                actionEvent -> {
                    int idx = list1.getSelectedIndex();
                    int i = 0;
                    // Find the selected patron and create an EditPatron form with it selected.
                    for (Map.Entry<Long, Patron> entry : Patron.getLoadedPatrons().entrySet()) {
                        if (i == idx) {
                            EditPatron form = new EditPatron(entry.getValue(), frame, this, idx);
                            frame.setContentPane(form.getPanel());
                            frame.validate();
                            frame.repaint();
                        }
                        i++;
                    }
                });
        selectPatron.addActionListener(
                actionEvent -> {
                    int idx = list1.getSelectedIndex();
                    int i = 0;
                    // Find the selected patron and view the library from their point of view.
                    for (Map.Entry<Long, Patron> entry : Patron.getLoadedPatrons().entrySet()) {
                        if (i == idx) {
                            Long id = entry.getKey();
                            Patron patron = Patron.getLoadedPatrons().get(id);
                            PatronPage page = new PatronPage(patron, frame, libraryGUI);
                            frame.setContentPane(page.getPanel());
                            frame.validate();
                            frame.repaint();
                        }
                        i++;
                    }
                });
        backButton.addActionListener(
                // Go back to the librarian panel.
                actionEvent -> {
                    frame.setContentPane(librarianPanel.getPanel());
                    frame.validate();
                    frame.repaint();
                });
    }

    /**
     * Gets the objects panel property.
     *
     * @return The JPanel belonging to the object.
     */
    public JPanel getPanel() {
        return AllPatrons;
    }

    /**
     * Gets the objects list property.
     *
     * @return The JList belonging to the object.
     */
    public JList<String> getItemList() {
        return list1;
    }

    /**
     * Gets the objects list model property.
     *
     * @return The DefaultListMod belonging to the object.
     */
    public DefaultListModel<String> getListModel() {
        return listModel;
    }

    private void createUIComponents() {
        notificationText = new Notifier();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        AllPatrons = new JPanel();
        AllPatrons.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial Narrow", -1, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Patron List");
        AllPatrons.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        AllPatrons.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deletePatron = new JButton();
        deletePatron.setText("Delete");
        panel1.add(deletePatron, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editPatron = new JButton();
        editPatron.setText("Edit");
        panel1.add(editPatron, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectPatron = new JButton();
        selectPatron.setText("Select Patron");
        panel1.add(selectPatron, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        panel1.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        AllPatrons.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        scrollPane1.setViewportView(list1);
        AllPatrons.add(notificationText, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return AllPatrons;
    }

}
