/* (C)2023 */
package org.gui;

import org.file.Encryptor;
import org.library.Main;
import org.library.Patron;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Locale;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

public class LibraryGUI {
    private JPanel Library;
    private JButton loginButton;
    private JButton clearButton;
    private JTextField usernameTextField;
    private JPasswordField passwordPasswordField;

    public LibraryGUI(JFrame frame) {
        loginButton.addActionListener(
                actionEvent -> {
                    String user = usernameTextField.getText();
                    String pword = String.valueOf(passwordPasswordField.getPassword());
                    String encrypted_pword = Encryptor.SHA512(pword);
                    if (user.equals("-1")) {
                        if (!pword.equals("librarian")) return;
                        LibrarianPanel page = new LibrarianPanel(frame, this);
                        frame.setContentPane(page.getPanel());
                        frame.validate();
                        frame.repaint();
                        clear();
                        return;
                    }
                    long id = Long.parseLong(user);
                    if (!Patron.getLoadedPatrons().containsKey(id)) {
                        usernameTextField.setText("Patron not found");
                        return;
                    }
                    Patron patron = Patron.getLoadedPatrons().get(id);
                    if (patron.getPassword().equals(encrypted_pword)) {
                        PatronPage page = new PatronPage(patron, frame, this);
                        frame.setContentPane(page.getPanel());
                        frame.validate();
                        frame.repaint();
                        clear();
                    } else usernameTextField.setText("Incorrect Password");
                });
        clearButton.addActionListener(
                actionEvent -> {
                    clear();
                });
    }

    public JPanel getPanel() {
        return Library;
    }

    public void clear() {
        usernameTextField.setText("Username");
        passwordPasswordField.setText("Password");
    }

    public static void draw() {
        JFrame frame = new JFrame("LibraryGUI");
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        frame.setContentPane(new LibraryGUI(frame).Library);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.addWindowListener(
                new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        Main.cleanup();
                    }
                });
        frame.setSize(200, 500);
        frame.pack();
        frame.setVisible(true);
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Library = new JPanel();
        Library.setLayout(
                new com.intellij.uiDesigner.core.GridLayoutManager(
                        2, 1, new Insets(10, 10, 10, 10), -1, -1));
        Library.setEnabled(false);
        Library.setBorder(
                BorderFactory.createTitledBorder(
                        null,
                        "",
                        TitledBorder.DEFAULT_JUSTIFICATION,
                        TitledBorder.DEFAULT_POSITION,
                        null,
                        null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(
                new com.intellij.uiDesigner.core.GridLayoutManager(
                        1, 2, new Insets(0, 0, 0, 0), -1, -1));
        Library.add(
                panel1,
                new com.intellij.uiDesigner.core.GridConstraints(
                        1,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        null,
                        null,
                        null,
                        0,
                        false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(
                new com.intellij.uiDesigner.core.GridLayoutManager(
                        1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setEnabled(false);
        panel1.add(
                panel2,
                new com.intellij.uiDesigner.core.GridConstraints(
                        0,
                        1,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        null,
                        null,
                        null,
                        0,
                        false));
        loginButton = new JButton();
        loginButton.setEnabled(true);
        loginButton.setText("Login");
        panel2.add(
                loginButton,
                new com.intellij.uiDesigner.core.GridConstraints(
                        0,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        null,
                        null,
                        0,
                        false));
        clearButton = new JButton();
        clearButton.setHideActionText(false);
        clearButton.setText("Clear");
        panel1.add(
                clearButton,
                new com.intellij.uiDesigner.core.GridConstraints(
                        0,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        null,
                        null,
                        0,
                        false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(
                new com.intellij.uiDesigner.core.GridLayoutManager(
                        3, 1, new Insets(0, 0, 0, 0), -1, -1));
        Library.add(
                panel3,
                new com.intellij.uiDesigner.core.GridConstraints(
                        0,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK
                                | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW,
                        null,
                        null,
                        null,
                        0,
                        false));
        passwordPasswordField = new JPasswordField();
        passwordPasswordField.setHorizontalAlignment(0);
        passwordPasswordField.setText("Password");
        passwordPasswordField.setToolTipText("Password");
        panel3.add(
                passwordPasswordField,
                new com.intellij.uiDesigner.core.GridConstraints(
                        2,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        new Dimension(150, -1),
                        null,
                        0,
                        false));
        usernameTextField = new JTextField();
        usernameTextField.setHorizontalAlignment(0);
        usernameTextField.setText("Username");
        panel3.add(
                usernameTextField,
                new com.intellij.uiDesigner.core.GridConstraints(
                        1,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        new Dimension(150, -1),
                        null,
                        0,
                        false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial Narrow", Font.PLAIN, 26, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(10);
        label1.setHorizontalTextPosition(11);
        label1.setText("Peyton's Awesome Library");
        panel3.add(
                label1,
                new com.intellij.uiDesigner.core.GridConstraints(
                        0,
                        0,
                        1,
                        1,
                        com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER,
                        com.intellij.uiDesigner.core.GridConstraints.FILL_NONE,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED,
                        null,
                        null,
                        null,
                        0,
                        false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font =
                new Font(
                        resultName,
                        style >= 0 ? style : currentFont.getStyle(),
                        size >= 0 ? size : currentFont.getSize());
        boolean isMac =
                System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback =
                isMac
                        ? new Font(font.getFamily(), font.getStyle(), font.getSize())
                        : new StyleContext()
                                .getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource
                ? fontWithFallback
                : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return Library;
    }
}
